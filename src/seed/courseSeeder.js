// scripts/seedCourses.js
const mongoose = require('mongoose');
const { connect } = require('../mongoose'); // d√πng h√†m connect() s·∫µn c√≥ c·ªßa b·∫°n
const { Course } = require('../models/course');

// ====== D·ªÆ LI·ªÜU M·∫™U ======
const courseTitles = [
  'Introduction to JavaScript',
  'Advanced Node.js Development',
  'MongoDB for Beginners',
  'Express.js Framework Guide',
  'React Frontend Development',
  'Vue.js Complete Course',
  'Angular Application Building',
  'Python for Data Science',
  'Machine Learning Basics',
  'Deep Learning with TensorFlow',
  'CSS Styling Techniques',
  'HTML Fundamentals',
  'Database Design Principles',
  'RESTful API Development',
  'GraphQL Implementation',
  'Docker Containerization',
  'Kubernetes Orchestration',
  'AWS Cloud Services',
  'Cybersecurity Fundamentals',
  'Mobile App Development',
  'DevOps Practices',
  'Git Version Control',
  'Agile Project Management',
  'UI/UX Design Principles',
  'Software Testing Methods',
];

const languages = ['vi', 'en', 'fr', 'es', 'de'];
const levels = ['beginner', 'intermediate', 'advanced'];
const tagPool = [
  'javascript',
  'node',
  'mongodb',
  'express',
  'react',
  'vue',
  'angular',
  'python',
  'ml',
  'dl',
  'css',
  'html',
  'db',
  'rest',
  'graphql',
  'docker',
  'k8s',
  'aws',
  'security',
  'mobile',
  'devops',
  'git',
  'agile',
  'uiux',
  'testing',
];

// ====== HELPERS ======
const rand = n => Math.floor(Math.random() * n);
const pick = arr => arr[rand(arr.length)];
const pickMany = (arr, k) => {
  const s = new Set();
  while (s.size < k) s.add(pick(arr));
  return Array.from(s);
};
// random date trong ~2 nƒÉm g·∫ßn ƒë√¢y
const randomDate = () => {
  const now = Date.now();
  const past = now - 1000 * 60 * 60 * 24 * 365 * 2; // 2 nƒÉm
  return new Date(past + Math.random() * (now - past));
};

async function seedCourses() {
  try {
    await connect();
    console.log('‚úÖ Connected to MongoDB');

    // Xo√° collection c≈© n·∫øu c√≥ (b·ªè qua n·∫øu ch∆∞a t·ªìn t·∫°i)
    await mongoose.connection.db.dropCollection('courses').catch(err => {
      if (err.code !== 26) throw err; // 26 = NamespaceNotFound
    });
    console.log('üóëÔ∏è  Dropped courses collection');

    // T·∫°o l·∫°i + sync index theo schema hi·ªán t·∫°i
    await Course.createCollection();
    await Course.syncIndexes();
    console.log('üß≠ Indexes synced');

    const COUNT = 20;
    const nowSuffix = Date.now();

    const docs = Array.from({ length: COUNT }, (_, i) => {
      const title = pick(courseTitles);
      const baseSlug = title
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^\w-]+/g, '');

      const price = Math.floor(Math.random() * 201) * 1000; // 0..200000
      const level = pick(levels);
      const tags = pickMany(tagPool, rand(4) + 1); // 1..4 tags
      const publishedAt = Math.random() < 0.85 ? randomDate() : null; // 15% ch∆∞a publish

      return {
        title,
        slug: `${baseSlug}-${nowSuffix}-${i}`, // unique ·ªïn ƒë·ªãnh
        lang: pick(languages),
        price,
        level,
        tags,
        publishedAt,
        stats: {
          lessonCount: rand(50) + 1, // 1..50
          enrolled: rand(1000), // 0..999
        },
        // createdAt ƒë·ªÉ m·∫∑c ƒë·ªãnh Date.now trong schema
      };
    });

    const inserted = await Course.insertMany(docs, { ordered: false });
    console.log(`‚úÖ Inserted ${inserted.length} courses`);

    console.log('\nüîé Sample (5):');
    inserted.slice(0, 5).forEach(c => {
      console.log(
        `- ${c.title} | ${c.slug} | level=${c.level} | ${c.price} VND | tags=${c.tags.join(',')}`
      );
    });

    process.exit(0);
  } catch (err) {
    console.error('‚ùå Error seeding courses:', err);
    process.exit(1);
  }
}

seedCourses();
